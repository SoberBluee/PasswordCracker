# Form implementation generated from reading ui file 'GUI.ui'
#
# Created by: PyQt6 UI code generator 6.1.0
#
# WARNING: Any manual changes made to this file will be lost when pyuic6 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt6 import QtCore, QtGui, QtWidgets
from PyQt6.QtWidgets import QFileDialog, QApplication, QMainWindow
import hashlib
import time
import os.path
from multiprocessing import Process
from AttackAlgorithms.BruteForceAlgorithm import BruteForce 
from AttackAlgorithms.DictionaryAttackAlgorithm import DicionaryAttack
from GUIOptions import Ui_OptionsWindow

class AttackOptions:
    def __init__(self, name):
        self.name = name
        self.hash_value = ""
        self.hash_type = ""
        self.attack_type = ""
        self.wordlist_location = ""
        self.hash_file_location = ""
        self.charsetAll = False
        self.charsetLower = False
        self.charsetUpper = False
        self.charsetNumbers = False
        self.charsetSymbols = False
        self.cpu = False
        self.gpu = False 

    def set_bruteforce_options():
        pass

    def set_dictionary_options():
        pass

    def set_hybrid_options():
        pass

    def set_rainbowtable_options():
        pass

class Ui_App(object):
    def __init__(self ,parent=None):
        self.hash_type_content = hashlib.algorithms_guaranteed
        self.attack_type_content = ["Brute Force", "Dictionary", "Hybrid", "Rule-Based", "Rainbow Table", "Markov Chain"]
        self.lower_alpha = "abcdefghijklmnopqrstuvwxyz"
        self.upper_alpha = "ABCDEFGHIJKLMNOPQRSTUVWXYZ"
        self.numeric = "1234567890"
        self.symbols = '!"#$%&\'()*+,-./:;<=>?@[\\]^_`{|}~ '
        self.all_charset = self.lower_alpha + self.upper_alpha + self.numeric + self.symbols

    def setupUi(self, App):
        App.setObjectName("App")
        App.resize(1012, 696)
        palette = QtGui.QPalette()
        brush = QtGui.QBrush(QtGui.QColor(0, 120, 215))
        brush.setStyle(QtCore.Qt.BrushStyle.SolidPattern)
        palette.setBrush(QtGui.QPalette.ColorGroup.Active, QtGui.QPalette.ColorRole.Highlight, brush)
        brush = QtGui.QBrush(QtGui.QColor(240, 240, 240))
        brush.setStyle(QtCore.Qt.BrushStyle.SolidPattern)
        palette.setBrush(QtGui.QPalette.ColorGroup.Inactive, QtGui.QPalette.ColorRole.Highlight, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 120, 215))
        brush.setStyle(QtCore.Qt.BrushStyle.SolidPattern)
        palette.setBrush(QtGui.QPalette.ColorGroup.Disabled, QtGui.QPalette.ColorRole.Highlight, brush)
        App.setPalette(palette)
        self.centralwidget = QtWidgets.QWidget(App)
        self.centralwidget.setObjectName("centralwidget")
        self.attack = QtWidgets.QGroupBox(self.centralwidget)
        self.attack.setGeometry(QtCore.QRect(10, 10, 991, 561))
        palette = QtGui.QPalette()
        brush = QtGui.QBrush(QtGui.QColor(0, 120, 215))
        brush.setStyle(QtCore.Qt.BrushStyle.SolidPattern)
        palette.setBrush(QtGui.QPalette.ColorGroup.Active, QtGui.QPalette.ColorRole.Highlight, brush)
        brush = QtGui.QBrush(QtGui.QColor(240, 240, 240))
        brush.setStyle(QtCore.Qt.BrushStyle.SolidPattern)
        palette.setBrush(QtGui.QPalette.ColorGroup.Inactive, QtGui.QPalette.ColorRole.Highlight, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 120, 215))
        brush.setStyle(QtCore.Qt.BrushStyle.SolidPattern)
        palette.setBrush(QtGui.QPalette.ColorGroup.Disabled, QtGui.QPalette.ColorRole.Highlight, brush)
        self.attack.setPalette(palette)
        font = QtGui.QFont()
        font.setPointSize(14)
        self.attack.setFont(font)
        self.attack.setAlignment(QtCore.Qt.AlignmentFlag.AlignCenter)
        self.attack.setObjectName("attack")
        self.hashValueLbl = QtWidgets.QLabel(self.attack)
        self.hashValueLbl.setGeometry(QtCore.QRect(10, 30, 61, 21))
        font = QtGui.QFont()
        font.setPointSize(16)
        self.hashValueLbl.setFont(font)
        self.hashValueLbl.setObjectName("hashValueLbl")
        self.hashInputTxt = QtWidgets.QTextEdit(self.attack)
        self.hashInputTxt.setGeometry(QtCore.QRect(70, 30, 811, 31))
        font = QtGui.QFont()
        font.setPointSize(10)
        self.hashInputTxt.setFont(font)
        self.hashInputTxt.setObjectName("hashInputTxt")
        self.crackBtn = QtWidgets.QPushButton(self.attack)
        self.crackBtn.setGeometry(QtCore.QRect(10, 360, 101, 31))
        self.crackBtn.setObjectName("crackBtn")
        self.deviceFrame = QtWidgets.QFrame(self.attack)
        self.deviceFrame.setGeometry(QtCore.QRect(10, 230, 101, 121))
        palette = QtGui.QPalette()
        brush = QtGui.QBrush(QtGui.QColor(0, 120, 215))
        brush.setStyle(QtCore.Qt.BrushStyle.SolidPattern)
        palette.setBrush(QtGui.QPalette.ColorGroup.Active, QtGui.QPalette.ColorRole.Highlight, brush)
        brush = QtGui.QBrush(QtGui.QColor(240, 240, 240))
        brush.setStyle(QtCore.Qt.BrushStyle.SolidPattern)
        palette.setBrush(QtGui.QPalette.ColorGroup.Inactive, QtGui.QPalette.ColorRole.Highlight, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 120, 215))
        brush.setStyle(QtCore.Qt.BrushStyle.SolidPattern)
        palette.setBrush(QtGui.QPalette.ColorGroup.Disabled, QtGui.QPalette.ColorRole.Highlight, brush)
        self.deviceFrame.setPalette(palette)
        self.deviceFrame.setTabletTracking(False)
        self.deviceFrame.setFocusPolicy(QtCore.Qt.FocusPolicy.NoFocus)
        self.deviceFrame.setAutoFillBackground(True)
        self.deviceFrame.setFrameShape(QtWidgets.QFrame.Shape.StyledPanel)
        self.deviceFrame.setFrameShadow(QtWidgets.QFrame.Shadow.Raised)
        self.deviceFrame.setObjectName("deviceFrame")
        self.deviceLbl = QtWidgets.QLabel(self.deviceFrame)
        self.deviceLbl.setGeometry(QtCore.QRect(20, 10, 91, 16))
        self.deviceLbl.setObjectName("deviceLbl")
        self.cpu_enabled = QtWidgets.QRadioButton(self.deviceFrame)
        self.cpu_enabled.setGeometry(QtCore.QRect(20, 40, 71, 20))
        self.cpu_enabled.setObjectName("cpu_enabled")
        self.gpu_enabled = QtWidgets.QRadioButton(self.deviceFrame)
        self.gpu_enabled.setGeometry(QtCore.QRect(20, 70, 71, 20))
        self.gpu_enabled.setObjectName("gpu_enabled")
        self.charsetFrame = QtWidgets.QFrame(self.attack)
        self.charsetFrame.setGeometry(QtCore.QRect(770, 70, 211, 151))
        palette = QtGui.QPalette()
        brush = QtGui.QBrush(QtGui.QColor(0, 120, 215))
        brush.setStyle(QtCore.Qt.BrushStyle.SolidPattern)
        palette.setBrush(QtGui.QPalette.ColorGroup.Active, QtGui.QPalette.ColorRole.Highlight, brush)
        brush = QtGui.QBrush(QtGui.QColor(240, 240, 240))
        brush.setStyle(QtCore.Qt.BrushStyle.SolidPattern)
        palette.setBrush(QtGui.QPalette.ColorGroup.Inactive, QtGui.QPalette.ColorRole.Highlight, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 120, 215))
        brush.setStyle(QtCore.Qt.BrushStyle.SolidPattern)
        palette.setBrush(QtGui.QPalette.ColorGroup.Disabled, QtGui.QPalette.ColorRole.Highlight, brush)
        self.charsetFrame.setPalette(palette)
        self.charsetFrame.setTabletTracking(False)
        self.charsetFrame.setFocusPolicy(QtCore.Qt.FocusPolicy.NoFocus)
        self.charsetFrame.setAutoFillBackground(True)
        self.charsetFrame.setFrameShape(QtWidgets.QFrame.Shape.StyledPanel)
        self.charsetFrame.setFrameShadow(QtWidgets.QFrame.Shadow.Raised)
        self.charsetFrame.setObjectName("charsetFrame")
        self.charsetLbl = QtWidgets.QLabel(self.charsetFrame)
        self.charsetLbl.setGeometry(QtCore.QRect(10, 10, 101, 21))
        self.charsetLbl.setObjectName("charsetLbl")
        self.charsetAll = QtWidgets.QCheckBox(self.charsetFrame)
        self.charsetAll.setGeometry(QtCore.QRect(10, 40, 161, 20))
        self.charsetAll.setObjectName("charsetAll")
        self.charsetLower = QtWidgets.QCheckBox(self.charsetFrame)
        self.charsetLower.setGeometry(QtCore.QRect(10, 60, 181, 20))
        self.charsetLower.setToolTip("")
        self.charsetLower.setObjectName("charsetLower")
        self.charsetUpper = QtWidgets.QCheckBox(self.charsetFrame)
        self.charsetUpper.setGeometry(QtCore.QRect(10, 80, 181, 20))
        self.charsetUpper.setObjectName("charsetUpper")
        self.charsetNumbers = QtWidgets.QCheckBox(self.charsetFrame)
        self.charsetNumbers.setGeometry(QtCore.QRect(10, 100, 151, 20))
        self.charsetNumbers.setObjectName("charsetNumbers")
        self.charsetSymbols = QtWidgets.QCheckBox(self.charsetFrame)
        self.charsetSymbols.setGeometry(QtCore.QRect(10, 120, 151, 20))
        self.charsetSymbols.setObjectName("charsetSymbols")
        self.wordlistFrame = QtWidgets.QFrame(self.attack)
        self.wordlistFrame.setEnabled(True)
        self.wordlistFrame.setGeometry(QtCore.QRect(390, 70, 371, 151))
        palette = QtGui.QPalette()
        brush = QtGui.QBrush(QtGui.QColor(0, 120, 215))
        brush.setStyle(QtCore.Qt.BrushStyle.SolidPattern)
        palette.setBrush(QtGui.QPalette.ColorGroup.Active, QtGui.QPalette.ColorRole.Highlight, brush)
        brush = QtGui.QBrush(QtGui.QColor(240, 240, 240))
        brush.setStyle(QtCore.Qt.BrushStyle.SolidPattern)
        palette.setBrush(QtGui.QPalette.ColorGroup.Inactive, QtGui.QPalette.ColorRole.Highlight, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 120, 215))
        brush.setStyle(QtCore.Qt.BrushStyle.SolidPattern)
        palette.setBrush(QtGui.QPalette.ColorGroup.Disabled, QtGui.QPalette.ColorRole.Highlight, brush)
        self.wordlistFrame.setPalette(palette)
        self.wordlistFrame.setTabletTracking(False)
        self.wordlistFrame.setFocusPolicy(QtCore.Qt.FocusPolicy.NoFocus)
        self.wordlistFrame.setAutoFillBackground(True)
        self.wordlistFrame.setFrameShape(QtWidgets.QFrame.Shape.StyledPanel)
        self.wordlistFrame.setFrameShadow(QtWidgets.QFrame.Shadow.Raised)
        self.wordlistFrame.setObjectName("wordlistFrame")
        self.wordlistLbl = QtWidgets.QLabel(self.wordlistFrame)
        self.wordlistLbl.setGeometry(QtCore.QRect(10, 10, 191, 16))
        self.wordlistLbl.setObjectName("wordlistLbl")
        self.wordlistTxt = QtWidgets.QPlainTextEdit(self.wordlistFrame)
        self.wordlistTxt.setGeometry(QtCore.QRect(10, 40, 351, 31))
        font = QtGui.QFont()
        font.setPointSize(10)
        self.wordlistTxt.setFont(font)
        self.wordlistTxt.setToolTip("")
        self.wordlistTxt.setObjectName("wordlistTxt")
        self.browseBtn = QtWidgets.QPushButton(self.wordlistFrame)
        self.browseBtn.setGeometry(QtCore.QRect(10, 80, 111, 31))
        self.browseBtn.setObjectName("browseBtn")
        self.wordlistFilenameLbl = QtWidgets.QLabel(self.wordlistFrame)
        self.wordlistFilenameLbl.setGeometry(QtCore.QRect(10, 120, 351, 16))
        self.wordlistFilenameLbl.setObjectName("wordlistFilenameLbl")
        self.attacktypeFrame = QtWidgets.QFrame(self.attack)
        self.attacktypeFrame.setGeometry(QtCore.QRect(200, 70, 181, 151))
        palette = QtGui.QPalette()
        brush = QtGui.QBrush(QtGui.QColor(0, 120, 215))
        brush.setStyle(QtCore.Qt.BrushStyle.SolidPattern)
        palette.setBrush(QtGui.QPalette.ColorGroup.Active, QtGui.QPalette.ColorRole.Highlight, brush)
        brush = QtGui.QBrush(QtGui.QColor(240, 240, 240))
        brush.setStyle(QtCore.Qt.BrushStyle.SolidPattern)
        palette.setBrush(QtGui.QPalette.ColorGroup.Inactive, QtGui.QPalette.ColorRole.Highlight, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 120, 215))
        brush.setStyle(QtCore.Qt.BrushStyle.SolidPattern)
        palette.setBrush(QtGui.QPalette.ColorGroup.Disabled, QtGui.QPalette.ColorRole.Highlight, brush)
        self.attacktypeFrame.setPalette(palette)
        self.attacktypeFrame.setTabletTracking(False)
        self.attacktypeFrame.setFocusPolicy(QtCore.Qt.FocusPolicy.NoFocus)
        self.attacktypeFrame.setAutoFillBackground(True)
        self.attacktypeFrame.setFrameShape(QtWidgets.QFrame.Shape.StyledPanel)
        self.attacktypeFrame.setFrameShadow(QtWidgets.QFrame.Shadow.Raised)
        self.attacktypeFrame.setObjectName("attacktypeFrame")
        self.attackTypeLbl = QtWidgets.QLabel(self.attacktypeFrame)
        self.attackTypeLbl.setGeometry(QtCore.QRect(40, 10, 101, 21))
        self.attackTypeLbl.setObjectName("attackTypeLbl")
        self.attackTypeCombo = QtWidgets.QComboBox(self.attacktypeFrame)
        self.attackTypeCombo.setGeometry(QtCore.QRect(10, 40, 161, 22))
        self.attackTypeCombo.setObjectName("attackTypeCombo")
        self.attackOptionsBtn = QtWidgets.QPushButton(self.attacktypeFrame)
        self.attackOptionsBtn.setGeometry(QtCore.QRect(10, 70, 161, 31))
        self.attackOptionsBtn.setObjectName("attackOptionsBtn")
        self.hashTypeFrame = QtWidgets.QFrame(self.attack)
        self.hashTypeFrame.setGeometry(QtCore.QRect(10, 70, 181, 151))
        palette = QtGui.QPalette()
        brush = QtGui.QBrush(QtGui.QColor(0, 120, 215))
        brush.setStyle(QtCore.Qt.BrushStyle.SolidPattern)
        palette.setBrush(QtGui.QPalette.ColorGroup.Active, QtGui.QPalette.ColorRole.Highlight, brush)
        brush = QtGui.QBrush(QtGui.QColor(240, 240, 240))
        brush.setStyle(QtCore.Qt.BrushStyle.SolidPattern)
        palette.setBrush(QtGui.QPalette.ColorGroup.Inactive, QtGui.QPalette.ColorRole.Highlight, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 120, 215))
        brush.setStyle(QtCore.Qt.BrushStyle.SolidPattern)
        palette.setBrush(QtGui.QPalette.ColorGroup.Disabled, QtGui.QPalette.ColorRole.Highlight, brush)
        self.hashTypeFrame.setPalette(palette)
        self.hashTypeFrame.setTabletTracking(False)
        self.hashTypeFrame.setFocusPolicy(QtCore.Qt.FocusPolicy.NoFocus)
        self.hashTypeFrame.setAutoFillBackground(True)
        self.hashTypeFrame.setFrameShape(QtWidgets.QFrame.Shape.StyledPanel)
        self.hashTypeFrame.setFrameShadow(QtWidgets.QFrame.Shadow.Raised)
        self.hashTypeFrame.setObjectName("hashTypeFrame")
        self.hashTypeLbl = QtWidgets.QLabel(self.hashTypeFrame)
        self.hashTypeLbl.setGeometry(QtCore.QRect(40, 10, 91, 21))
        self.hashTypeLbl.setObjectName("hashTypeLbl")
        self.hashTypeCombo = QtWidgets.QComboBox(self.hashTypeFrame)
        self.hashTypeCombo.setGeometry(QtCore.QRect(10, 40, 161, 22))
        self.hashTypeCombo.setObjectName("hashTypeCombo")
        self.detectHashBtn = QtWidgets.QPushButton(self.hashTypeFrame)
        self.detectHashBtn.setGeometry(QtCore.QRect(10, 70, 161, 31))
        self.detectHashBtn.setObjectName("detectHashBtn")
        self.output = QtWidgets.QTextBrowser(self.attack)
        self.output.setGeometry(QtCore.QRect(120, 230, 861, 321))
        self.output.setObjectName("output")
        self.optionBtn = QtWidgets.QPushButton(self.attack)
        self.optionBtn.setGeometry(QtCore.QRect(10, 520, 101, 31))
        self.optionBtn.setObjectName("optionBtn")
        self.passwordFileBtn = QtWidgets.QPushButton(self.attack)
        self.passwordFileBtn.setGeometry(QtCore.QRect(890, 30, 91, 31))
        self.passwordFileBtn.setObjectName("passwordFileBtn")
        self.pauseBtn = QtWidgets.QPushButton(self.attack)
        self.pauseBtn.setGeometry(QtCore.QRect(10, 400, 101, 31))
        self.pauseBtn.setObjectName("pauseBtn")
        self.resumeBtn = QtWidgets.QPushButton(self.attack)
        self.resumeBtn.setGeometry(QtCore.QRect(10, 440, 101, 31))
        self.resumeBtn.setObjectName("resumeBtn")
        self.saveBtn = QtWidgets.QPushButton(self.attack)
        self.saveBtn.setGeometry(QtCore.QRect(10, 480, 101, 31))
        self.saveBtn.setObjectName("saveBtn")
        self.newattack = QtWidgets.QGroupBox(self.centralwidget)
        self.newattack.setGeometry(QtCore.QRect(10, 580, 621, 71))
        palette = QtGui.QPalette()
        brush = QtGui.QBrush(QtGui.QColor(0, 120, 215))
        brush.setStyle(QtCore.Qt.BrushStyle.SolidPattern)
        palette.setBrush(QtGui.QPalette.ColorGroup.Active, QtGui.QPalette.ColorRole.Highlight, brush)
        brush = QtGui.QBrush(QtGui.QColor(240, 240, 240))
        brush.setStyle(QtCore.Qt.BrushStyle.SolidPattern)
        palette.setBrush(QtGui.QPalette.ColorGroup.Inactive, QtGui.QPalette.ColorRole.Highlight, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 120, 215))
        brush.setStyle(QtCore.Qt.BrushStyle.SolidPattern)
        palette.setBrush(QtGui.QPalette.ColorGroup.Disabled, QtGui.QPalette.ColorRole.Highlight, brush)
        self.newattack.setPalette(palette)
        font = QtGui.QFont()
        font.setPointSize(14)
        self.newattack.setFont(font)
        self.newattack.setAlignment(QtCore.Qt.AlignmentFlag.AlignCenter)
        self.newattack.setObjectName("newattack")
        self.newAttackNameLbl = QtWidgets.QLabel(self.newattack)
        self.newAttackNameLbl.setGeometry(QtCore.QRect(10, 30, 81, 21))
        font = QtGui.QFont()
        font.setPointSize(16)
        self.newAttackNameLbl.setFont(font)
        self.newAttackNameLbl.setObjectName("newAttackNameLbl")
        self.newAttackNameTxt = QtWidgets.QTextEdit(self.newattack)
        self.newAttackNameTxt.setGeometry(QtCore.QRect(80, 30, 311, 31))
        font = QtGui.QFont()
        font.setPointSize(10)
        self.newAttackNameTxt.setFont(font)
        self.newAttackNameTxt.setObjectName("newAttackNameTxt")
        self.createNewAttackBtn = QtWidgets.QPushButton(self.newattack)
        self.createNewAttackBtn.setGeometry(QtCore.QRect(510, 30, 101, 31))
        self.createNewAttackBtn.setObjectName("createNewAttackBtn")
        self.loadNewAttackBtn = QtWidgets.QPushButton(self.newattack)
        self.loadNewAttackBtn.setGeometry(QtCore.QRect(400, 30, 101, 31))
        self.loadNewAttackBtn.setObjectName("loadNewAttackBtn")
        App.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(App)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 1012, 22))
        self.menubar.setObjectName("menubar")
        self.menuFile = QtWidgets.QMenu(self.menubar)
        self.menuFile.setObjectName("menuFile")
        self.menuAttack = QtWidgets.QMenu(self.menubar)
        self.menuAttack.setObjectName("menuAttack")
        self.menuAbout = QtWidgets.QMenu(self.menubar)
        self.menuAbout.setObjectName("menuAbout")
        App.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(App)
        self.statusbar.setObjectName("statusbar")
        App.setStatusBar(self.statusbar)
        self.actionNew = QtGui.QAction(App)
        self.actionNew.setObjectName("actionNew")
        self.actionOpen = QtGui.QAction(App)
        self.actionOpen.setObjectName("actionOpen")
        self.actionSave = QtGui.QAction(App)
        self.actionSave.setObjectName("actionSave")
        self.actionCopy = QtGui.QAction(App)
        self.actionCopy.setObjectName("actionCopy")
        self.actionpaste = QtGui.QAction(App)
        self.actionpaste.setObjectName("actionpaste")
        self.actionLoad = QtGui.QAction(App)
        self.actionLoad.setObjectName("actionLoad")
        self.actionSave_2 = QtGui.QAction(App)
        self.actionSave_2.setObjectName("actionSave_2")
        self.menuFile.addAction(self.actionLoad)
        self.menuFile.addAction(self.actionSave_2)
        self.menubar.addAction(self.menuFile.menuAction())
        self.menubar.addAction(self.menuAttack.menuAction())
        self.menubar.addAction(self.menuAbout.menuAction())
    
        #Initialize combo boxes
        self._initComboBox()

        #Creating all button click events
        self.crackBtn.clicked.connect(self._crack)
        self.optionBtn.clicked.connect(self._options)
        self.detectHashBtn.clicked.connect(self._detect)
        self.createNewAttackBtn.clicked.connect(self._createNewAttack)
        self.loadNewAttackBtn.clicked.connect(self._load)
        self.attackOptionsBtn.clicked.connect(self._attackOptions)
        self.browseBtn.clicked.connect(self._browseWordlist)
        self.passwordFileBtn.clicked.connect(self._browsePasswordFile)
        self.pauseBtn.clicked.connect(self._pause)
        self.resumeBtn.clicked.connect(self._resume)
        self.saveBtn.clicked.connect(self._save)

        #On a combo box change, call _alterFrame
        self.attackTypeCombo.currentIndexChanged.connect(self._alterFrame) 

        self.retranslateUi(App)
        QtCore.QMetaObject.connectSlotsByName(App)

    def retranslateUi(self, App):
        _translate = QtCore.QCoreApplication.translate
        App.setWindowTitle(_translate("App", "MainWindow"))
        self.attack.setTitle(_translate("App", "Hash Attack 1"))
        self.hashValueLbl.setText(_translate("App", "Hash"))
        self.hashInputTxt.setToolTip(_translate("App", "Hash value you want to crack."))
        self.crackBtn.setToolTip(_translate("App", "Start attack."))
        self.crackBtn.setText(_translate("App", "Crack!"))
        self.deviceLbl.setText(_translate("App", "Device"))
        self.cpu_enabled.setToolTip(_translate("App", "Use multi-threading / multi-processing to crack the password"))
        self.cpu_enabled.setText(_translate("App", "CPU"))
        self.gpu_enabled.setToolTip(_translate("App", "Use multi-threading on the GPU to crack the password"))
        self.gpu_enabled.setText(_translate("App", "GPU"))
        self.charsetLbl.setText(_translate("App", "Charset"))
        self.charsetAll.setText(_translate("App", "All"))
        self.charsetLower.setText(_translate("App", "Lower Alpha (a-z)"))
        self.charsetUpper.setText(_translate("App", "Upper Alpha (A-Z)"))
        self.charsetNumbers.setText(_translate("App", "Numbers (0-9)"))
        self.charsetSymbols.setText(_translate("App", "Symbols (!,@)"))
        self.wordlistLbl.setText(_translate("App", "Word List"))
        self.browseBtn.setText(_translate("App", "Browse"))
        self.wordlistFilenameLbl.setText(_translate("App", ":"))
        self.attackTypeLbl.setText(_translate("App", "Attack Type"))
        self.attackTypeCombo.setToolTip(_translate("App", "Select the method to crack the hash value."))
        self.attackOptionsBtn.setToolTip(_translate("App", "Options for each attack method"))
        self.attackOptionsBtn.setText(_translate("App", "Attack Options"))
        self.hashTypeLbl.setText(_translate("App", "Hash Type"))
        self.hashTypeCombo.setToolTip(_translate("App", "The hashing algorithm of the provided hash value."))
        self.detectHashBtn.setToolTip(_translate("App", "Auto detect the hashing algorithm for a hash value."))
        self.detectHashBtn.setText(_translate("App", "Detect"))
        self.optionBtn.setToolTip(_translate("App", "Application options."))
        self.optionBtn.setText(_translate("App", "Options"))
        self.passwordFileBtn.setToolTip(_translate("App", "Upload multiple passwords in a file to crack."))
        self.passwordFileBtn.setText(_translate("App", "PWD File"))
        self.pauseBtn.setToolTip(_translate("App", "Pause an attack"))
        self.pauseBtn.setText(_translate("App", "Pause"))
        self.resumeBtn.setToolTip(_translate("App", "Resume attack"))
        self.resumeBtn.setText(_translate("App", "Resume"))
        self.saveBtn.setText(_translate("App", "Save"))
        self.newattack.setTitle(_translate("App", "Create New Attack"))
        self.newAttackNameLbl.setText(_translate("App", "Name: "))
        self.newAttackNameTxt.setToolTip(_translate("App", "Name of a new attack"))
        self.createNewAttackBtn.setToolTip(_translate("App", "Create new attack."))
        self.createNewAttackBtn.setText(_translate("App", "Create"))
        self.loadNewAttackBtn.setToolTip(_translate("App", "Load previous attack"))
        self.loadNewAttackBtn.setText(_translate("App", "Load"))
        self.menuFile.setTitle(_translate("App", "File"))
        self.menuAttack.setTitle(_translate("App", "Attack"))
        self.menuAbout.setTitle(_translate("App", "About"))
        self.actionNew.setText(_translate("App", "New"))
        self.actionNew.setStatusTip(_translate("App", "Creates a new file"))
        self.actionNew.setShortcut(_translate("App", "Ctrl+N"))
        self.actionOpen.setText(_translate("App", "Open"))
        self.actionSave.setText(_translate("App", "Save"))
        self.actionSave.setStatusTip(_translate("App", "Saves a file"))
        self.actionCopy.setText(_translate("App", "Copy"))
        self.actionCopy.setStatusTip(_translate("App", "Copy a file"))
        self.actionCopy.setShortcut(_translate("App", "Ctrl+C"))
        self.actionpaste.setText(_translate("App", "paste"))
        self.actionpaste.setStatusTip(_translate("App", "Paste a file"))
        self.actionpaste.setShortcut(_translate("App", "Ctrl+S"))
        self.actionLoad.setText(_translate("App", "Load"))
        self.actionSave_2.setText(_translate("App", "Save"))

    #Name: _alterFrame
    #Description: Will disable frames depending on the attack type selected
    #Parameters: self
    #returns: none
    def _alterFrame(self):
        #Gets currently selected attack type
        attack_selection = self.attackTypeCombo.currentText()

        if(attack_selection == "Brute Force"):
            self.wordlistFrame.setEnabled(False) 
            self.charsetFrame.setEnabled(True)
            self.charsetLower.setEnabled(True)
            self.charsetUpper.setEnabled(True)
            self.wordlistLbl.setText("Word List") 
            
        elif(attack_selection == "Dictionary"):
            self.wordlistFrame.setEnabled(True)
            self.charsetFrame.setEnabled(False)
            self.wordlistLbl.setText("Wordlist") 

        elif(attack_selection == "Hybrid"):
            self.wordlistFrame.setEnabled(True) 
            self.charsetFrame.setEnabled(True)
            self.charsetLower.setEnabled(False)
            self.charsetUpper.setEnabled(False)
            self.wordlistLbl.setText("Dictionary") 
        
        elif(attack_selection == "Rule-Based"):
            self.wordlistFrame.setEnabled(True) 
            self.charsetFrame.setEnabled(False)
            self.charsetLower.setEnabled(True)
            self.charsetUpper.setEnabled(True)
            self.wordlistLbl.setText("Rule-set") 
        
        elif(attack_selection == "Rainbow Table"):
            self.wordlistFrame.setEnabled(True) 
            self.charsetFrame.setEnabled(False)
            self.wordlistLbl.setText("Rainbow table") 
            
        elif(attack_selection == "Markov Chain"):
            self.wordlistFrame.setEnabled(False) 
            self.charsetFrame.setEnabled(False)

    #Name: check_parameters
    #Description: Will check if parameters on GUI are filled in
    #Parameters: self
    #returns: check: Boolean tuple
    def check_parameters(self):
        check = [True, True, True] #assume user has filled in the form
        #Check if user filled in values 
        if(self.attack_options.hash_value == ""):
            self.output.append("-= No Hash Value Entered =-")
            check[0] = False
        if(self.attack_options.hash_type == ""):
            self.output.append("-= No Hash Type Selected =-")
            check[1] = False
        if(self.attack_options.attack_type == ""):
            self.output.append("-= No Attack Type Selected =-")
            check[2] = False
        return check
            
    #Name: __getHashValue__
    #Description: Will return the plain text hash value from input box
    #Parameters: self
    #returns: self.hashInputTxt: String
    def __getHashValue__(self):
        return self.hashInputTxt.toPlainText()

    #Name: _initComboBox
    #Description: Will initialize all combo boxs on the application
    #Parameters: self
    #returns: none
    def _initComboBox(self):
        self.hashTypeCombo.setPlaceholderText("Select Hash")
        self.hashTypeCombo.addItems(self.hash_type_content)
        self.attackTypeCombo.setPlaceholderText("Select Attack")
        self.attackTypeCombo.addItems(self.attack_type_content)
        
    #Name: _load
    #Description: Will load a new attack from a text file
    #Parameters: self
    #returns: none
    def _load(self):
        print("-Load Attack-")

    #Name: _browsePasswordFile
    #Description: Will load a password file with multiple hash values
    #Parameters: self
    #returns: none
    def _browsePasswordFile(self):
        print("-Load Password File-")
        #Open file dialog box
        hash_file = QtWidgets.QFileDialog.getOpenFileName(None, 'Open password file', 'C:\\', '*.txt')
        #set text edit to wordlist location
        self.hashInputTxt.insertPlainText(hash_file[0])

    #Name: _browseWordlist
    #Description: Will load a new attack from a text file
    #Parameters: self
    #returns: none
    def _browseWordlist(self):
        print("-Browse Wordlist-")
        #Open file dialog box
        wordlist_location = QtWidgets.QFileDialog.getOpenFileName(None, 'Open Wordlist', 'C:\\', '*.txt')
        #set text edit to wordlist location
        self.wordlistTxt.insertPlainText(wordlist_location[0])
        #split string to get filename
        file_name = wordlist_location[0].split("/")
        file_name = file_name[-1]
        #Set label to file name
        self.wordlistFilenameLbl.setText(file_name)
        self.wordlist_location = wordlist_location[0]
    
    #Name: _crack
    #Description: Will start a crack when user hash is provided
    #Parameters: self
    #returns: none
    def _crack(self):
        print("-Crack-")
        #Initializes Attack options with a name
        self.attack_options = AttackOptions("Attack1")

        #Initialize vairbales in AttackOptions with values from GUI
        self.attack_options.hash_value = self.__getHashValue__()
        self.attack_options.hash_type = str(self.hashTypeCombo.currentText())
        self.attack_options.attack_type = str(self.attackTypeCombo.currentText())
        self.attack_options.wordlist_location = self.wordlistTxt.toPlainText()
        self.attack_options.charsetAll = self.charsetAll.isChecked()
        self.attack_options.charsetLower = self.charsetLower.isChecked()
        self.attack_options.charsetUpper = self.charsetUpper.isChecked()
        self.attack_options.charsetNumbers = self.charsetNumbers.isChecked()
        self.attack_options.charsetSymbols = self.charsetSymbols.isChecked()
        self.attack_options.cpu = self.cpu_enabled.isChecked()
        self.attack_options.gpu = self.gpu_enabled.isChecked()

        print(f"Hash: {self.attack_options.hash_value}, Type: {self.attack_options.hash_type}, Attack: {self.attack_options.attack_type}, Wordlist: {self.attack_options.wordlist_location}")

        parameter_check = self.check_parameters()
        if(parameter_check == [True, True, True]):
            if(self.attack_options.attack_type == "Brute Force"):
                brute_force = BruteForce(self.attack_options)
                brute_force.main()
                return
            if(self.attack_options.attack_type == "Dictionary"):
                dictionary_attack = DicionaryAttack(self.attack_options)
                dictionary_attack.main()
                return
        else:
            print("Cannot start attack")

    #Name: _pause
    #Description: Will pause a current attack
    #Parameters: self
    #returns: none
    def _pause(self):
        print("-Pause Attack-")

    #Name: _resume
    #Description: Will resume the current attack
    #Parameters: self
    #returns: none
    def _resume(self):
        print("-Resume Attack-")
    

    #Name: _save_file
    #Description: Will create the file and write data to file
    #Parameters: self, location: String - file location
    #returns: none
    def _save_file(self, location):
        with open(location, "x") as file:    
            file.write(f"name={self.temp_attack}")
            file.write(f"hash_value={self.attack_options.hash_value}")
            file.write(f"hash_type={self.attack_options.hash_type}")
            file.write(f"attack_type={self.attack_options.attack_type}")
            file.write(f"wordlist_location={self.attack_options.wordlist_location}")
            file.write(f"hash_file_location={self.attack_options.hash_file_location}")
            file.write(f"lowerCharset={self.attack_options.charsetLower}")
            file.write(f"upperCharset={self.attack_options.charsetUpper}")
            file.write(f"numberCharset={self.attack_options.charsetNumbers}")
            file.write(f"symbolsCharset={self.attack_options.charsetSymbols}")
            file.write(f"wordlistLbl={self.temp_wordlistlbl}")
            file.write(f"output={self.temp_output}")

            file.close()
            self.output.append("-= File Saved Successfully =-")

    #Name: _save
    #Description: Will save an attack to a text file
    #Parameters: self
    #returns: none
    def _save(self):
        print("-Save Attack-")

        self.temp_wordlistlbl = self.wordlistFilenameLbl.text()
        self.temp_output = self.output.toPlainText()
        self.temp_name = self.attack.objectName()

        self.save_location = QFileDialog.getSaveFileName(None,'Save File')

        if(os.path.isfile(f"{self.save_location[0]}.txt")):
            self._save_file(f"{self.save_location[0]}(1).txt")
        else:
            self._save_file(f"{self.save_location[0]}.txt")
            


    #Name: _options
    #Description: will open up the application options
    #Parameters: self
    #returns: none
    def _options(self):
        print("-Options-")  
        options = Ui_OptionsWindow() 
        

        


    
        
        


    #Name: _detect
    #Description: Will try and detect hash from input field
    #Parameters: self
    #returns: none
    def _detect(self):
        print("-Detect Hash-")
        self.hash_value = self.__getHashValue__()
        
    #Name: _attackOptions
    #Description: will open up attack options
    #Parameters: self
    #returns: none
    def _attackOptions(self):
        print("-Options-")

    #Name: _createNewAttack
    #Description: Will create a new attack from create attack page
    #Parameters: self
    #returns: none
    def _createNewAttack(self):
        print("-Create new Attack-")

    #Name: _loadNewAttack
    #Description: Will load new attack from file into program
    #Parameters: self
    #returns: none
    def _loadNewAttack(self):
        print("-Load new Attack")

if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    App = QtWidgets.QMainWindow()
    ui = Ui_App()
    ui.setupUi(App)

    App.show()
    sys.exit(app.exec())



# Form implementation generated from reading ui file 'options.ui'
#
# Created by: PyQt6 UI code generator 6.1.0
#
# WARNING: Any manual changes made to this file will be lost when pyuic6 is
# run again.  Do not edit this file unless you know what you are doing.

import sys
from PyQt6.QtWidgets import QWidget

from PyQt6 import QtCore, QtGui, QtWidgets

class Ui_OptionsWindow(object):
    def setupUi(self, MainWindow):
        MainWindow.setObjectName("Form")
        MainWindow.resize(294, 363)
        self.OptionsGroup = QtWidgets.QGroupBox(MainWindow)
        self.OptionsGroup.setGeometry(QtCore.QRect(10, 10, 271, 341))
        font = QtGui.QFont()
        font.setPointSize(14)
        self.OptionsGroup.setFont(font)
        self.OptionsGroup.setObjectName("OptionsGroup")
        self.threadLbl = QtWidgets.QLabel(self.OptionsGroup)
        self.threadLbl.setGeometry(QtCore.QRect(20, 30, 81, 21))
        self.threadLbl.setObjectName("threadLbl")
        self.threadCountSpin = QtWidgets.QSpinBox(self.OptionsGroup)
        self.threadCountSpin.setGeometry(QtCore.QRect(20, 60, 81, 21))
        self.threadCountSpin.setObjectName("threadCountSpin")
        self.passphraseLengthLbl = QtWidgets.QLabel(self.OptionsGroup)
        self.passphraseLengthLbl.setGeometry(QtCore.QRect(20, 80, 211, 31))
        self.passphraseLengthLbl.setObjectName("passphraseLengthLbl")
        self.passphraseMaxLenSpin = QtWidgets.QSpinBox(self.OptionsGroup)
        self.passphraseMaxLenSpin.setGeometry(QtCore.QRect(20, 120, 81, 21))
        self.passphraseMaxLenSpin.setObjectName("passphraseMaxLenSpin")
        self.maxBruteForceLenLbl = QtWidgets.QLabel(self.OptionsGroup)
        self.maxBruteForceLenLbl.setGeometry(QtCore.QRect(20, 150, 211, 31))
        self.maxBruteForceLenLbl.setObjectName("maxBruteForceLenLbl")
        self.bruteForceMaxSpin = QtWidgets.QSpinBox(self.OptionsGroup)
        self.bruteForceMaxSpin.setGeometry(QtCore.QRect(20, 190, 81, 21))
        self.bruteForceMaxSpin.setObjectName("bruteForceMaxSpin")

        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)
        

    def _applyOptions():
        pass
    
    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "Form"))
        self.OptionsGroup.setTitle(_translate("MainWindow", "Options"))
        self.threadLbl.setText(_translate("MainWindow", "Threads:"))
        self.passphraseLengthLbl.setText(_translate("MainWindow", "Passphrase MAX Length:"))
        self.maxBruteForceLenLbl.setText(_translate("MainWindow", "Max Brute Force length"))