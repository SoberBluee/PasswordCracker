# Form implementation generated from reading ui file 'GUI.ui'
#
# Created by: PyQt6 UI code generator 6.1.0
#
# WARNING: Any manual changes made to this file will be lost when pyuic6 is
# run again.  Do not edit this file unless you know what you are doing.

#Needed imports for applications
import hashlib
import time
import os
import multiprocessing
from multiprocessing import Process, Array, Event
import logging
import random

#PyQt6 imports
from PyQt6 import QtCore, QtGui, QtWidgets
from PyQt6.QtWidgets import QFileDialog, QApplication, QWidget
from PyQt6.QtCore import QObject, QRunnable, QThread, pyqtSignal, Qt, QThreadPool
from numpy import character

#Attack algorithm imports
from AttackOptions import AttackOptions
from AttackAlgorithms.BruteForceAlgorithm import BruteForce 
from AttackAlgorithms.DictionaryAttackAlgorithm import DicionaryAttack
from GUIOptions import Ui_OptionsWindow

logging.basicConfig(filename="log/guiDesign.log", filemode="w", format="'%(name)s -=- %(levelname)s - %(message)s - %(process)s")

"""
Class Name: BruteForceWorker
Description: Will start brute force attack using core_count to multi-process
Parameters: QRunnable: Start create a thread class
"""
class BruteForceWorker(QRunnable):
    """"
    Name: __init__
    Description: Constructor function BruteForceWorker. 
    Parameters: self, attack_options: AttackOptions
    returns: none
    """
    def __init__(self, attack_options, charset, output):
        super().__init__()
        self.attack_options = attack_options
        self.charset = charset
        self.output = output
        self.process_list = list()
        self.core_count = self.attack_options.core_count

        
    def split_data(self):
        split_data = list()
        self.charset = list(self.charset)

        charset_len = len(self.charset)
        gap = int(charset_len / self.attack_options.core_count)

        #split data based on a gap size 
        data = [self.charset[i:i+gap] for i in range(0, charset_len, gap)]
        #if the split data size does not match the core_count then it will randomly allocate a character to another array
        if(len(data) != self.core_count):
            odd = data[-1]
            for idx, x in enumerate(odd):
                random_int = random.randint(0,self.core_count)
                data[random_int] += x
            data.pop(-1)
            
        return data

    """
    Name: process_result
    Description: Will get the correct result file and output result to output box
    Parameters: self 
    returns: none
    """
    def process_result(self):
        result_counter = 0 
        #Will cound number of results file in case there are more than one result file
        for filename in os.listdir("AppData/"):
            if filename.startswith("result"):
                result_counter += 1

        #Will get the latest version of the results from AppData folder
        if(result_counter == 0):
            filename = f"AppData/result.txt"
        else:
            result_counter -= 1 
            if(result_counter == 0):
                filename = f"AppData/result.txt"
            else:
                filename = f"AppData/result{result_counter}.txt"

        #Will open the results file and output results in the correct order
        with open(filename, "r") as result:
            for idx, data in enumerate(result):
                if(idx == 1):
                    self.output.append(f" {data} sec")
                else:
                    self.output.append(f" Password: {data}")
    
    """
    Name: brute_force_cpu
    Description: Will start a brute force attack using the CPU
    Parameters: self 
    returns: none
    """
    def brute_force_cpu(self):
        data = self.split_data()

        #found event triggered when password found
        self.found = Event()
    
        for idx,i in enumerate(range(self.core_count)):
            starting_point = data[i][0]
            
            dictionary = BruteForce(self.attack_options, starting_point, self.charset ,self.found)

            #Creating process using the dictionary main function
            p = multiprocessing.Process(target=dictionary.main)
            self.process_list.append(p)

        #Starts processes
        for process in self.process_list:
            process.start()
            
        #Wait's until password is found
        self.found.wait()

        #Terminates processes
        for process in self.process_list:
            print("Terminating")
            process.terminate()

        for process in self.process_list:
            process.join()
            
        self.process_result()
        
        self.output.append(" Attack Finished ")

        print("Done")
    
    """
    Name: brute_force_gpu
    Description: Will start a brute force attack using the GPU
    Parameters: self 
    returns: none
    """
    def brute_force_gpu(self):
        pass
    
    """
    Name: run
    Description: Starts brute force attack using process amount with process terminatation(syncronisation)
    Parameters: self 
    returns: none
    """
    def run(self):
        if(self.attack_options.cpu):
            logging.info("CPU SELECTED")
            self.output.append(" Using CPU")
            self.brute_force_cpu()
        elif(self.attack_options.gpu):
            logging.info("GPU SELECTED")
            self.output.append(" Using GPU")
            self.brute_force_gpu()
        


"""
Class Name: DictionaryWorker
Description: Will start dictionary attack using core_count to multi-process
Parameters: QRunnable: Start create a thread class
"""
class DictionaryWorker(QRunnable):
    
    """"
    Name: __init__
    Description: Constructor function Dictionary Worker. 
    Parameters: self 
    returns: none
    """
    def __init__(self, attack_options, output):
        super().__init__()
        self.attack_options = attack_options
        self.output = output
        self.process_list = list()
        self.data = None
        self.core_count = self.attack_options.core_count

    def data_generator():
        pass

    """"
    Name: split_data
    Description: Splits rockyou.txt into equal sections for processing  
    Parameters: self 
    returns: none
    """
    def split_data(self):
        data_to_split = list()
        tic = time.time()
        with open(self.attack_options.wordlist_location, encoding="latin-1") as file:
            #append data using set comprehensions
            data_to_split = [line for line in file]

        data = [data_to_split[i::self.core_count] for i in range(self.core_count)] #split up data into chuncks for each process
        toc = time.time()
        
        print('Split Data: {:.4f} seconds'.format(toc-tic))
        logging.info('Split Data: {:.4f} seconds'.format(toc-tic))
        self.output.append(' Split Data: {:.4f} seconds'.format(toc-tic))
        
        return data
    
    """
    Name: process_result
    Description: Will get the correct result file and output result to output box
    Parameters: self 
    returns: none
    """
    def process_result(self):
        result_counter = 0 
        #Will cound number of results file in case there are more than one result file
        for filename in os.listdir("AppData/"):
            if filename.startswith("result"):
                result_counter += 1

        #Will get the latest version of the results from AppData folder
        if(result_counter == 0):
            filename = f"AppData/result.txt"
        else:
            result_counter -= 1 
            if(result_counter == 0):
                filename = f"AppData/result.txt"
            else:
                filename = f"AppData/result{result_counter}.txt"

        #Will open the results file and output results in the correct order
        with open(filename, "r") as result:
            for idx, data in enumerate(result):
                if(idx == 1):
                    self.output.append(f" {data} sec")
                else:
                    self.output.append(f" Password: {data}")

    """
    Name: dictionary_cpu
    Description: Will start a dictionary attack using the CPU
    Parameters: self 
    returns: none
    """
    def dictionary_cpu(self):
        #Split data into chunk for each process
        data = self.split_data()
        #found event triggered when password found
        self.found = Event()
       
        for idx,t in enumerate(range(self.core_count)):
            dictionary = DicionaryAttack(self.attack_options, data[idx], self.found)
            #Creating process using the dictionary main function
            p = multiprocessing.Process(target=dictionary.main)
            self.process_list.append(p)

        #Starts processes
        for process in self.process_list:
            process.start()
            
        #Wait's until password is found
        self.found.wait()

        #Terminates processes
        for process in self.process_list:
            print("Terminating")
            process.terminate()

        for process in self.process_list:
            process.join()
            
        self.process_result()
        
        self.output.append(" Attack Finished ")

        print("Done")
       
    
    """
    Name: dictionary_gpu
    Description: Will start a dictionary attack using the GPU
    Parameters: self 
    returns: none
    """
    def dictionary_gpu(self):
        print("dictionary_gpu")

        #start gpu attack

    """
    Name: run
    Description: Starts dictionary attack using process amount with process terminatation(syncronisation)
    Parameters: self 
    returns: none
    """
    def run(self):
        if(self.attack_options.cpu):
            logging.info("CPU SELECTED")
            self.output.append(" Using CPU")
            self.dictionary_cpu()
        elif(self.attack_options.gpu):
            logging.info("GPU SELECTED")
            self.output.append(" Using GPU")
            self.dictionary_gpu()
        

class RuleBasedWorker(QRunnable):
    def __init__(self, attack_options):
        pass
    def split_data(self):
        pass
    def rulebase_cpu(self):
        pass
    def rulebase_gpu(self):
        pass
    def run(self):
        pass
    

class HybridWorker(QRunnable):
    def __init__(self, attack_options):
        pass
    def split_data(self):
        pass
    def hybrid_cpu(self):
        pass
    def hybrid_gpu(self):
        pass
    def run(self):
        pass

class RainbowTableWorker(QRunnable):
    def __init__(self, attack_options):
        pass
    def split_data(self):
        pass
    def rainbowtable_cpu(self):
        pass
    def rainbowtable_gpu(self):
        pass
    def run(self):
        pass

class MarkovWorker(QRunnable):
    def __init__(self, attack_options):
        pass
    def split_data(self):
        pass
    def markov_cpu(self):
        pass
    def markov_gpu(self):
        pass
    def run(self):
        pass


"""
Class Name: Ui_App
Class Description: Main window for application
Parameters: None
"""
class Ui_App(object):
    """"
    Name: __init__
    Description: Constructor function Ui_app Worker used to initialize data. 
    Parameters: self 
    returns: none
    """
    def __init__(self):
        super().__init__()    
        attack_options = AttackOptions("attack1")
        self.options = Ui_OptionsWindow(attack_options)
        self.hash_type_content = hashlib.algorithms_guaranteed
        self.attack_type_content = ["Brute Force", "Dictionary", "Hybrid", "Rule-Based", "Rainbow Table", "Markov Chain"]
        self.lower_alpha = "abcdefghijklmnopqrstuvwxyz"
        self.upper_alpha = "ABCDEFGHIJKLMNOPQRSTUVWXYZ"
        self.numeric = "1234567890"
        self.symbols = '!"#$%&\'()*+,-./:;<=>?@[\\]^_`{|}~ '
        self.hash_file_location = ""
        self.all_charset = self.lower_alpha + self.upper_alpha + self.numeric + self.symbols

    """"
    Name: setupUi
    Description: Will initialize all UI elements and displays application to user
    Parameters: App:QMainWindows 
    returns: none
    """
    def setupUi(self, App):
        App.setObjectName("App")
        App.resize(1012, 696)
        palette = QtGui.QPalette()
        brush = QtGui.QBrush(QtGui.QColor(0, 120, 215))
        brush.setStyle(QtCore.Qt.BrushStyle.SolidPattern)
        palette.setBrush(QtGui.QPalette.ColorGroup.Active, QtGui.QPalette.ColorRole.Highlight, brush)
        brush = QtGui.QBrush(QtGui.QColor(240, 240, 240))
        brush.setStyle(QtCore.Qt.BrushStyle.SolidPattern)
        palette.setBrush(QtGui.QPalette.ColorGroup.Inactive, QtGui.QPalette.ColorRole.Highlight, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 120, 215))
        brush.setStyle(QtCore.Qt.BrushStyle.SolidPattern)
        palette.setBrush(QtGui.QPalette.ColorGroup.Disabled, QtGui.QPalette.ColorRole.Highlight, brush)
        App.setPalette(palette)
        self.centralwidget = QtWidgets.QWidget(App)
        self.centralwidget.setObjectName("centralwidget")
        self.attack = QtWidgets.QGroupBox(self.centralwidget)
        self.attack.setGeometry(QtCore.QRect(10, 10, 991, 561))
        palette = QtGui.QPalette()
        brush = QtGui.QBrush(QtGui.QColor(0, 120, 215))
        brush.setStyle(QtCore.Qt.BrushStyle.SolidPattern)
        palette.setBrush(QtGui.QPalette.ColorGroup.Active, QtGui.QPalette.ColorRole.Highlight, brush)
        brush = QtGui.QBrush(QtGui.QColor(240, 240, 240))
        brush.setStyle(QtCore.Qt.BrushStyle.SolidPattern)
        palette.setBrush(QtGui.QPalette.ColorGroup.Inactive, QtGui.QPalette.ColorRole.Highlight, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 120, 215))
        brush.setStyle(QtCore.Qt.BrushStyle.SolidPattern)
        palette.setBrush(QtGui.QPalette.ColorGroup.Disabled, QtGui.QPalette.ColorRole.Highlight, brush)
        self.attack.setPalette(palette)
        font = QtGui.QFont()
        font.setPointSize(14)
        self.attack.setFont(font)
        self.attack.setAlignment(QtCore.Qt.AlignmentFlag.AlignCenter)
        self.attack.setObjectName("attack")
        self.hashValueLbl = QtWidgets.QLabel(self.attack)
        self.hashValueLbl.setGeometry(QtCore.QRect(10, 30, 61, 21))
        font = QtGui.QFont()
        font.setPointSize(16)
        self.hashValueLbl.setFont(font)
        self.hashValueLbl.setObjectName("hashValueLbl")
        self.hashInputTxt = QtWidgets.QTextEdit(self.attack)
        self.hashInputTxt.setGeometry(QtCore.QRect(70, 30, 811, 31))
        font = QtGui.QFont()
        font.setPointSize(10)
        self.hashInputTxt.setFont(font)
        self.hashInputTxt.setObjectName("hashInputTxt")
        self.crackBtn = QtWidgets.QPushButton(self.attack)
        self.crackBtn.setGeometry(QtCore.QRect(10, 360, 101, 31))
        self.crackBtn.setObjectName("crackBtn")
        self.deviceFrame = QtWidgets.QFrame(self.attack)
        self.deviceFrame.setGeometry(QtCore.QRect(10, 230, 101, 121))
        palette = QtGui.QPalette()
        brush = QtGui.QBrush(QtGui.QColor(0, 120, 215))
        brush.setStyle(QtCore.Qt.BrushStyle.SolidPattern)
        palette.setBrush(QtGui.QPalette.ColorGroup.Active, QtGui.QPalette.ColorRole.Highlight, brush)
        brush = QtGui.QBrush(QtGui.QColor(240, 240, 240))
        brush.setStyle(QtCore.Qt.BrushStyle.SolidPattern)
        palette.setBrush(QtGui.QPalette.ColorGroup.Inactive, QtGui.QPalette.ColorRole.Highlight, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 120, 215))
        brush.setStyle(QtCore.Qt.BrushStyle.SolidPattern)
        palette.setBrush(QtGui.QPalette.ColorGroup.Disabled, QtGui.QPalette.ColorRole.Highlight, brush)
        self.deviceFrame.setPalette(palette)
        self.deviceFrame.setTabletTracking(False)
        self.deviceFrame.setFocusPolicy(QtCore.Qt.FocusPolicy.NoFocus)
        self.deviceFrame.setAutoFillBackground(True)
        self.deviceFrame.setFrameShape(QtWidgets.QFrame.Shape.StyledPanel)
        self.deviceFrame.setFrameShadow(QtWidgets.QFrame.Shadow.Raised)
        self.deviceFrame.setObjectName("deviceFrame")
        self.deviceLbl = QtWidgets.QLabel(self.deviceFrame)
        self.deviceLbl.setGeometry(QtCore.QRect(20, 10, 91, 16))
        self.deviceLbl.setObjectName("deviceLbl")
        self.cpu_enabled = QtWidgets.QRadioButton(self.deviceFrame)
        self.cpu_enabled.setGeometry(QtCore.QRect(20, 40, 71, 20))
        self.cpu_enabled.setObjectName("cpu_enabled")
        self.gpu_enabled = QtWidgets.QRadioButton(self.deviceFrame)
        self.gpu_enabled.setGeometry(QtCore.QRect(20, 70, 71, 20))
        self.gpu_enabled.setObjectName("gpu_enabled")
        self.charsetFrame = QtWidgets.QFrame(self.attack)
        self.charsetFrame.setGeometry(QtCore.QRect(770, 70, 211, 151))
        palette = QtGui.QPalette()
        brush = QtGui.QBrush(QtGui.QColor(0, 120, 215))
        brush.setStyle(QtCore.Qt.BrushStyle.SolidPattern)
        palette.setBrush(QtGui.QPalette.ColorGroup.Active, QtGui.QPalette.ColorRole.Highlight, brush)
        brush = QtGui.QBrush(QtGui.QColor(240, 240, 240))
        brush.setStyle(QtCore.Qt.BrushStyle.SolidPattern)
        palette.setBrush(QtGui.QPalette.ColorGroup.Inactive, QtGui.QPalette.ColorRole.Highlight, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 120, 215))
        brush.setStyle(QtCore.Qt.BrushStyle.SolidPattern)
        palette.setBrush(QtGui.QPalette.ColorGroup.Disabled, QtGui.QPalette.ColorRole.Highlight, brush)
        self.charsetFrame.setPalette(palette)
        self.charsetFrame.setTabletTracking(False)
        self.charsetFrame.setFocusPolicy(QtCore.Qt.FocusPolicy.NoFocus)
        self.charsetFrame.setAutoFillBackground(True)
        self.charsetFrame.setFrameShape(QtWidgets.QFrame.Shape.StyledPanel)
        self.charsetFrame.setFrameShadow(QtWidgets.QFrame.Shadow.Raised)
        self.charsetFrame.setObjectName("charsetFrame")
        self.charsetLbl = QtWidgets.QLabel(self.charsetFrame)
        self.charsetLbl.setGeometry(QtCore.QRect(10, 10, 101, 21))
        self.charsetLbl.setObjectName("charsetLbl")
        self.charsetAll = QtWidgets.QCheckBox(self.charsetFrame)
        self.charsetAll.setGeometry(QtCore.QRect(10, 40, 161, 20))
        self.charsetAll.setObjectName("charsetAll")
        self.charsetLower = QtWidgets.QCheckBox(self.charsetFrame)
        self.charsetLower.setGeometry(QtCore.QRect(10, 60, 181, 20))
        self.charsetLower.setToolTip("")
        self.charsetLower.setObjectName("charsetLower")
        self.charsetUpper = QtWidgets.QCheckBox(self.charsetFrame)
        self.charsetUpper.setGeometry(QtCore.QRect(10, 80, 181, 20))
        self.charsetUpper.setObjectName("charsetUpper")
        self.charsetNumbers = QtWidgets.QCheckBox(self.charsetFrame)
        self.charsetNumbers.setGeometry(QtCore.QRect(10, 100, 151, 20))
        self.charsetNumbers.setObjectName("charsetNumbers")
        self.charsetSymbols = QtWidgets.QCheckBox(self.charsetFrame)
        self.charsetSymbols.setGeometry(QtCore.QRect(10, 120, 151, 20))
        self.charsetSymbols.setObjectName("charsetSymbols")
        self.wordlistFrame = QtWidgets.QFrame(self.attack)
        self.wordlistFrame.setEnabled(True)
        self.wordlistFrame.setGeometry(QtCore.QRect(390, 70, 371, 151))
        palette = QtGui.QPalette()
        brush = QtGui.QBrush(QtGui.QColor(0, 120, 215))
        brush.setStyle(QtCore.Qt.BrushStyle.SolidPattern)
        palette.setBrush(QtGui.QPalette.ColorGroup.Active, QtGui.QPalette.ColorRole.Highlight, brush)
        brush = QtGui.QBrush(QtGui.QColor(240, 240, 240))
        brush.setStyle(QtCore.Qt.BrushStyle.SolidPattern)
        palette.setBrush(QtGui.QPalette.ColorGroup.Inactive, QtGui.QPalette.ColorRole.Highlight, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 120, 215))
        brush.setStyle(QtCore.Qt.BrushStyle.SolidPattern)
        palette.setBrush(QtGui.QPalette.ColorGroup.Disabled, QtGui.QPalette.ColorRole.Highlight, brush)
        self.wordlistFrame.setPalette(palette)
        self.wordlistFrame.setTabletTracking(False)
        self.wordlistFrame.setFocusPolicy(QtCore.Qt.FocusPolicy.NoFocus)
        self.wordlistFrame.setAutoFillBackground(True)
        self.wordlistFrame.setFrameShape(QtWidgets.QFrame.Shape.StyledPanel)
        self.wordlistFrame.setFrameShadow(QtWidgets.QFrame.Shadow.Raised)
        self.wordlistFrame.setObjectName("wordlistFrame")
        self.wordlistLbl = QtWidgets.QLabel(self.wordlistFrame)
        self.wordlistLbl.setGeometry(QtCore.QRect(10, 10, 191, 16))
        self.wordlistLbl.setObjectName("wordlistLbl")
        self.wordlistTxt = QtWidgets.QPlainTextEdit(self.wordlistFrame)
        self.wordlistTxt.setGeometry(QtCore.QRect(10, 40, 351, 31))
        font = QtGui.QFont()
        font.setPointSize(10)
        self.wordlistTxt.setFont(font)
        self.wordlistTxt.setToolTip("")
        self.wordlistTxt.setObjectName("wordlistTxt")
        self.browseBtn = QtWidgets.QPushButton(self.wordlistFrame)
        self.browseBtn.setGeometry(QtCore.QRect(10, 80, 111, 31))
        self.browseBtn.setObjectName("browseBtn")
        self.wordlistFilenameLbl = QtWidgets.QLabel(self.wordlistFrame)
        self.wordlistFilenameLbl.setGeometry(QtCore.QRect(10, 120, 351, 16))
        self.wordlistFilenameLbl.setObjectName("wordlistFilenameLbl")
        self.attacktypeFrame = QtWidgets.QFrame(self.attack)
        self.attacktypeFrame.setGeometry(QtCore.QRect(200, 70, 181, 151))
        palette = QtGui.QPalette()
        brush = QtGui.QBrush(QtGui.QColor(0, 120, 215))
        brush.setStyle(QtCore.Qt.BrushStyle.SolidPattern)
        palette.setBrush(QtGui.QPalette.ColorGroup.Active, QtGui.QPalette.ColorRole.Highlight, brush)
        brush = QtGui.QBrush(QtGui.QColor(240, 240, 240))
        brush.setStyle(QtCore.Qt.BrushStyle.SolidPattern)
        palette.setBrush(QtGui.QPalette.ColorGroup.Inactive, QtGui.QPalette.ColorRole.Highlight, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 120, 215))
        brush.setStyle(QtCore.Qt.BrushStyle.SolidPattern)
        palette.setBrush(QtGui.QPalette.ColorGroup.Disabled, QtGui.QPalette.ColorRole.Highlight, brush)
        self.attacktypeFrame.setPalette(palette)
        self.attacktypeFrame.setTabletTracking(False)
        self.attacktypeFrame.setFocusPolicy(QtCore.Qt.FocusPolicy.NoFocus)
        self.attacktypeFrame.setAutoFillBackground(True)
        self.attacktypeFrame.setFrameShape(QtWidgets.QFrame.Shape.StyledPanel)
        self.attacktypeFrame.setFrameShadow(QtWidgets.QFrame.Shadow.Raised)
        self.attacktypeFrame.setObjectName("attacktypeFrame")
        self.attackTypeLbl = QtWidgets.QLabel(self.attacktypeFrame)
        self.attackTypeLbl.setGeometry(QtCore.QRect(40, 10, 101, 21))
        self.attackTypeLbl.setObjectName("attackTypeLbl")
        self.attackTypeCombo = QtWidgets.QComboBox(self.attacktypeFrame)
        self.attackTypeCombo.setGeometry(QtCore.QRect(10, 40, 161, 22))
        self.attackTypeCombo.setObjectName("attackTypeCombo")
        self.attackOptionsBtn = QtWidgets.QPushButton(self.attacktypeFrame)
        self.attackOptionsBtn.setGeometry(QtCore.QRect(10, 70, 161, 31))
        self.attackOptionsBtn.setObjectName("attackOptionsBtn")
        self.hashTypeFrame = QtWidgets.QFrame(self.attack)
        self.hashTypeFrame.setGeometry(QtCore.QRect(10, 70, 181, 151))
        palette = QtGui.QPalette()
        brush = QtGui.QBrush(QtGui.QColor(0, 120, 215))
        brush.setStyle(QtCore.Qt.BrushStyle.SolidPattern)
        palette.setBrush(QtGui.QPalette.ColorGroup.Active, QtGui.QPalette.ColorRole.Highlight, brush)
        brush = QtGui.QBrush(QtGui.QColor(240, 240, 240))
        brush.setStyle(QtCore.Qt.BrushStyle.SolidPattern)
        palette.setBrush(QtGui.QPalette.ColorGroup.Inactive, QtGui.QPalette.ColorRole.Highlight, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 120, 215))
        brush.setStyle(QtCore.Qt.BrushStyle.SolidPattern)
        palette.setBrush(QtGui.QPalette.ColorGroup.Disabled, QtGui.QPalette.ColorRole.Highlight, brush)
        self.hashTypeFrame.setPalette(palette)
        self.hashTypeFrame.setTabletTracking(False)
        self.hashTypeFrame.setFocusPolicy(QtCore.Qt.FocusPolicy.NoFocus)
        self.hashTypeFrame.setAutoFillBackground(True)
        self.hashTypeFrame.setFrameShape(QtWidgets.QFrame.Shape.StyledPanel)
        self.hashTypeFrame.setFrameShadow(QtWidgets.QFrame.Shadow.Raised)
        self.hashTypeFrame.setObjectName("hashTypeFrame")
        self.hashTypeLbl = QtWidgets.QLabel(self.hashTypeFrame)
        self.hashTypeLbl.setGeometry(QtCore.QRect(40, 10, 91, 21))
        self.hashTypeLbl.setObjectName("hashTypeLbl")
        self.hashTypeCombo = QtWidgets.QComboBox(self.hashTypeFrame)
        self.hashTypeCombo.setGeometry(QtCore.QRect(10, 40, 161, 22))
        self.hashTypeCombo.setObjectName("hashTypeCombo")
        self.detectHashBtn = QtWidgets.QPushButton(self.hashTypeFrame)
        self.detectHashBtn.setGeometry(QtCore.QRect(10, 70, 161, 31))
        self.detectHashBtn.setObjectName("detectHashBtn")
        self.output = QtWidgets.QTextBrowser(self.attack)
        self.output.setGeometry(QtCore.QRect(120, 230, 861, 321))
        self.output.setObjectName("output")
        self.optionBtn = QtWidgets.QPushButton(self.attack)
        self.optionBtn.setGeometry(QtCore.QRect(10, 520, 101, 31))
        self.optionBtn.setObjectName("optionBtn")
        self.passwordFileBtn = QtWidgets.QPushButton(self.attack)
        self.passwordFileBtn.setGeometry(QtCore.QRect(890, 30, 91, 31))
        self.passwordFileBtn.setObjectName("passwordFileBtn")
        self.pauseBtn = QtWidgets.QPushButton(self.attack)
        self.pauseBtn.setGeometry(QtCore.QRect(10, 400, 101, 31))
        self.pauseBtn.setObjectName("pauseBtn")
        self.resumeBtn = QtWidgets.QPushButton(self.attack)
        self.resumeBtn.setGeometry(QtCore.QRect(10, 440, 101, 31))
        self.resumeBtn.setObjectName("resumeBtn")
        self.saveBtn = QtWidgets.QPushButton(self.attack)
        self.saveBtn.setGeometry(QtCore.QRect(10, 480, 101, 31))
        self.saveBtn.setObjectName("saveBtn")
        self.newattack = QtWidgets.QGroupBox(self.centralwidget)
        self.newattack.setGeometry(QtCore.QRect(10, 580, 621, 71))
        palette = QtGui.QPalette()
        brush = QtGui.QBrush(QtGui.QColor(0, 120, 215))
        brush.setStyle(QtCore.Qt.BrushStyle.SolidPattern)
        palette.setBrush(QtGui.QPalette.ColorGroup.Active, QtGui.QPalette.ColorRole.Highlight, brush)
        brush = QtGui.QBrush(QtGui.QColor(240, 240, 240))
        brush.setStyle(QtCore.Qt.BrushStyle.SolidPattern)
        palette.setBrush(QtGui.QPalette.ColorGroup.Inactive, QtGui.QPalette.ColorRole.Highlight, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 120, 215))
        brush.setStyle(QtCore.Qt.BrushStyle.SolidPattern)
        palette.setBrush(QtGui.QPalette.ColorGroup.Disabled, QtGui.QPalette.ColorRole.Highlight, brush)
        self.newattack.setPalette(palette)
        font = QtGui.QFont()
        font.setPointSize(14)
        self.newattack.setFont(font)
        self.newattack.setAlignment(QtCore.Qt.AlignmentFlag.AlignCenter)
        self.newattack.setObjectName("newattack")
        self.newAttackNameLbl = QtWidgets.QLabel(self.newattack)
        self.newAttackNameLbl.setGeometry(QtCore.QRect(10, 30, 81, 21))
        font = QtGui.QFont()
        font.setPointSize(16)
        self.newAttackNameLbl.setFont(font)
        self.newAttackNameLbl.setObjectName("newAttackNameLbl")
        self.newAttackNameTxt = QtWidgets.QTextEdit(self.newattack)
        self.newAttackNameTxt.setGeometry(QtCore.QRect(80, 30, 311, 31))
        font = QtGui.QFont()
        font.setPointSize(10)
        self.newAttackNameTxt.setFont(font)
        self.newAttackNameTxt.setObjectName("newAttackNameTxt")
        self.createNewAttackBtn = QtWidgets.QPushButton(self.newattack)
        self.createNewAttackBtn.setGeometry(QtCore.QRect(510, 30, 101, 31))
        self.createNewAttackBtn.setObjectName("createNewAttackBtn")
        self.loadNewAttackBtn = QtWidgets.QPushButton(self.newattack)
        self.loadNewAttackBtn.setGeometry(QtCore.QRect(400, 30, 101, 31))
        self.loadNewAttackBtn.setObjectName("loadNewAttackBtn")
        App.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(App)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 1012, 22))
        self.menubar.setObjectName("menubar")
        self.menuFile = QtWidgets.QMenu(self.menubar)
        self.menuFile.setObjectName("menuFile")
        self.menuAttack = QtWidgets.QMenu(self.menubar)
        self.menuAttack.setObjectName("menuAttack")
        self.menuAbout = QtWidgets.QMenu(self.menubar)
        self.menuAbout.setObjectName("menuAbout")
        App.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(App)
        self.statusbar.setObjectName("statusbar")
        App.setStatusBar(self.statusbar)
        self.actionNew = QtGui.QAction(App)
        self.actionNew.setObjectName("actionNew")
        self.actionOpen = QtGui.QAction(App)
        self.actionOpen.setObjectName("actionOpen")
        self.actionSave = QtGui.QAction(App)
        self.actionSave.setObjectName("actionSave")
        self.actionCopy = QtGui.QAction(App)
        self.actionCopy.setObjectName("actionCopy")
        self.actionpaste = QtGui.QAction(App)
        self.actionpaste.setObjectName("actionpaste")
        self.actionLoad = QtGui.QAction(App)
        self.actionLoad.setObjectName("actionLoad")
        self.actionSave_2 = QtGui.QAction(App)
        self.actionSave_2.setObjectName("actionSave_2")
        self.menuFile.addAction(self.actionLoad)
        self.menuFile.addAction(self.actionSave_2)
        self.menubar.addAction(self.menuFile.menuAction())
        self.menubar.addAction(self.menuAttack.menuAction())
        self.menubar.addAction(self.menuAbout.menuAction())
    
        #Initialize combo boxes
        self._initComboBox()

        #Creating all button click events
        self.crackBtn.clicked.connect(self._crack)
        self.optionBtn.clicked.connect(self._options)
        self.detectHashBtn.clicked.connect(self._detect)
        self.createNewAttackBtn.clicked.connect(self._createNewAttack)
        self.loadNewAttackBtn.clicked.connect(self._load)
        self.browseBtn.clicked.connect(self._browseWordlist)
        self.passwordFileBtn.clicked.connect(self._browsePasswordFile)
        self.pauseBtn.clicked.connect(self._pause)
        self.resumeBtn.clicked.connect(self._resume)
        self.saveBtn.clicked.connect(self._save)

        #On a combo box change, call _alterFrame
        self.attackTypeCombo.currentIndexChanged.connect(self._alterFrame) 

        self.retranslateUi(App)
        QtCore.QMetaObject.connectSlotsByName(App)

    """"
    Name: retranslateUi
    Description: Will initialize all UI elements with text and tooltips
    Parameters: App:QMainWindows 
    returns: none
    """
    def retranslateUi(self, App):
        _translate = QtCore.QCoreApplication.translate
        App.setWindowTitle(_translate("App", "Password Cracker"))
        self.attack.setTitle(_translate("App", "Hash Attack 1"))
        self.hashValueLbl.setText(_translate("App", "Hash"))
        self.hashInputTxt.setToolTip(_translate("App", "Hash value you want to crack."))
        self.crackBtn.setToolTip(_translate("App", "Start attack."))
        self.crackBtn.setText(_translate("App", "Crack!"))
        self.deviceLbl.setText(_translate("App", "Device"))
        self.cpu_enabled.setToolTip(_translate("App", "Use multi-threading / multi-processing to crack the password"))
        self.cpu_enabled.setText(_translate("App", "CPU"))
        self.gpu_enabled.setToolTip(_translate("App", "Use multi-threading on the GPU to crack the password"))
        self.gpu_enabled.setText(_translate("App", "GPU"))
        self.charsetLbl.setText(_translate("App", "Charset"))
        self.charsetAll.setText(_translate("App", "All"))
        self.charsetLower.setText(_translate("App", "Lower Alpha (a-z)"))
        self.charsetUpper.setText(_translate("App", "Upper Alpha (A-Z)"))
        self.charsetNumbers.setText(_translate("App", "Numbers (0-9)"))
        self.charsetSymbols.setText(_translate("App", "Symbols (!,@)"))
        self.wordlistLbl.setText(_translate("App", "Word List"))
        self.browseBtn.setText(_translate("App", "Browse"))
        self.wordlistFilenameLbl.setText(_translate("App", ":"))
        self.attackTypeLbl.setText(_translate("App", "Attack Type"))
        self.attackTypeCombo.setToolTip(_translate("App", "Select the method to crack the hash value."))
        self.attackOptionsBtn.setToolTip(_translate("App", "Options for each attack method"))
        self.attackOptionsBtn.setText(_translate("App", "Attack Options"))
        self.hashTypeLbl.setText(_translate("App", "Hash Type"))
        self.hashTypeCombo.setToolTip(_translate("App", "The hashing algorithm of the provided hash value."))
        self.detectHashBtn.setToolTip(_translate("App", "Auto detect the hashing algorithm for a hash value."))
        self.detectHashBtn.setText(_translate("App", "Detect"))
        self.optionBtn.setToolTip(_translate("App", "Application options."))
        self.optionBtn.setText(_translate("App", "Options"))
        self.passwordFileBtn.setToolTip(_translate("App", "Upload multiple passwords in a file to crack."))
        self.passwordFileBtn.setText(_translate("App", "PWD File"))
        self.pauseBtn.setToolTip(_translate("App", "Pause an attack"))
        self.pauseBtn.setText(_translate("App", "Pause"))
        self.resumeBtn.setToolTip(_translate("App", "Resume attack"))
        self.resumeBtn.setText(_translate("App", "Resume"))
        self.saveBtn.setText(_translate("App", "Save"))
        self.newattack.setTitle(_translate("App", "Create New Attack"))
        self.newAttackNameLbl.setText(_translate("App", "Name: "))
        self.newAttackNameTxt.setToolTip(_translate("App", "Name of a new attack"))
        self.createNewAttackBtn.setToolTip(_translate("App", "Create new attack."))
        self.createNewAttackBtn.setText(_translate("App", "Create"))
        self.loadNewAttackBtn.setToolTip(_translate("App", "Load previous attack"))
        self.loadNewAttackBtn.setText(_translate("App", "Load"))
        self.menuFile.setTitle(_translate("App", "File"))
        self.menuAttack.setTitle(_translate("App", "Attack"))
        self.menuAbout.setTitle(_translate("App", "About"))
        self.actionNew.setText(_translate("App", "New"))
        self.actionNew.setStatusTip(_translate("App", "Creates a new file"))
        self.actionNew.setShortcut(_translate("App", "Ctrl+N"))
        self.actionOpen.setText(_translate("App", "Open"))
        self.actionSave.setText(_translate("App", "Save"))
        self.actionSave.setStatusTip(_translate("App", "Saves a file"))
        self.actionCopy.setText(_translate("App", "Copy"))
        self.actionCopy.setStatusTip(_translate("App", "Copy a file"))
        self.actionCopy.setShortcut(_translate("App", "Ctrl+C"))
        self.actionpaste.setText(_translate("App", "paste"))
        self.actionpaste.setStatusTip(_translate("App", "Paste a file"))
        self.actionpaste.setShortcut(_translate("App", "Ctrl+S"))
        self.actionLoad.setText(_translate("App", "Load"))
        self.actionSave_2.setText(_translate("App", "Save"))
    """
    Name: _alterFrame
    Description: Will disable frames depending on the attack type selected
    Parameters: self
    returns: none
    """
    def _alterFrame(self):
        #Gets currently selected attack type
        attack_selection = self.attackTypeCombo.currentText()

        if(attack_selection == "Brute Force"):
            self.wordlistFrame.setEnabled(False) 
            self.charsetFrame.setEnabled(True)
            self.charsetLower.setEnabled(True)
            self.charsetUpper.setEnabled(True)
            self.wordlistLbl.setText("Word List") 
            
        elif(attack_selection == "Dictionary"):
            self.wordlistFrame.setEnabled(True)
            self.charsetFrame.setEnabled(False)
            self.wordlistLbl.setText("Wordlist") 

        elif(attack_selection == "Hybrid"):
            self.wordlistFrame.setEnabled(True) 
            self.charsetFrame.setEnabled(True)
            self.charsetLower.setEnabled(False)
            self.charsetUpper.setEnabled(False)
            self.wordlistLbl.setText("Dictionary") 
        
        elif(attack_selection == "Rule-Based"):
            self.wordlistFrame.setEnabled(True) 
            self.charsetFrame.setEnabled(False)
            self.charsetLower.setEnabled(True)
            self.charsetUpper.setEnabled(True)
            self.wordlistLbl.setText("Rule-set") 
        
        elif(attack_selection == "Rainbow Table"):
            self.wordlistFrame.setEnabled(True) 
            self.charsetFrame.setEnabled(False)
            self.wordlistLbl.setText("Rainbow table") 
            
        elif(attack_selection == "Markov Chain"):
            self.wordlistFrame.setEnabled(False) 
            self.charsetFrame.setEnabled(False)

    """
    Name: _check_parameters
    Description: Will check if parameters on GUI are filled in
    Parameters: self
    returns: check: Boolean tuple
    """
    def _check_parameters(self):
        check = [True, True, True] #assume user has filled in the form
        #Check if user filled in values 
        if(self.attack_options.hash_value == ""):
            self.output.append("-= No Hash Value Entered =-")
            check[0] = False
        if(self.attack_options.hash_type == ""):
            self.output.append("-= No Hash Type Selected =-")
            check[1] = False
        if(self.attack_options.attack_type == ""):
            self.output.append("-= No Attack Type Selected =-")
            check[2] = False
        return check

    """
    Name: __getHashValue__
    Description: Will return the plain text hash value from input box
    Parameters: self
    returns: self.hashInputTxt: String
    """
    def __getHashValue__(self):
        return self.hashInputTxt.toPlainText()

    """
    Name: _initComboBox
    Description: Will initialize all combo boxs on the application
    Parameters: self
    returns: none
    """
    def _initComboBox(self):
        self.hashTypeCombo.setPlaceholderText("Select Hash")
        self.hashTypeCombo.addItems(self.hash_type_content)
        self.attackTypeCombo.setPlaceholderText("Select Attack")
        self.attackTypeCombo.addItems(self.attack_type_content)
    

    """
    Name: _browsePasswordFile
    Description: Will load a password file with multiple hash values
    Parameters: self
    returns: none
    """
    def _browsePasswordFile(self):
        print("-Load Password File-")
        #Open file dialog box
        hash_file = QtWidgets.QFileDialog.getOpenFileName(None, 'Open password file', 'C:\\', '*.txt')
        #set text edit to wordlist location
        self.hash_file_location = self.hashInputTxt.insertPlainText(hash_file[0])
        
    """
    Name: _browseWordlist
    Description: Will load a new attack from a text file
    Parameters: self
    returns: none
    """
    def _browseWordlist(self):
        print("-Browse Wordlist-")
        #Open file dialog box
        wordlist_location = QtWidgets.QFileDialog.getOpenFileName(None, 'Open Wordlist', 'C:\\', '*.txt')
        #set text edit to wordlist location
        self.wordlistTxt.insertPlainText(wordlist_location[0])
        #split string to get filename
        file_name = wordlist_location[0].split("/")
        file_name = file_name[-1]
        #Set label to file name
        self.wordlistFilenameLbl.setText(file_name)
        self.wordlist_location = wordlist_location[0]

    """
    Name: _crack
    Description: Will start a crack when user hash is provided
    Parameters: self
    returns: none
    """
    def _crack(self):
        print("-Crack-")
        #Initializes Attack options with a name
        self.attack_options = AttackOptions("Attack1")

        #Initialize vairbales in AttackOptions with values from GUI
        self.attack_options.hash_value = self.__getHashValue__()
        self.attack_options.hash_type = str(self.hashTypeCombo.currentText())
        self.attack_options.attack_type = str(self.attackTypeCombo.currentText())
        self.attack_options.wordlist_location = self.wordlistTxt.toPlainText()
        self.attack_options.hash_file_location = self.hash_file_location
        self.attack_options.charsetAll = self.charsetAll.isChecked()
        self.attack_options.charsetLower = self.charsetLower.isChecked()
        self.attack_options.charsetUpper = self.charsetUpper.isChecked()
        self.attack_options.charsetNumbers = self.charsetNumbers.isChecked()
        self.attack_options.charsetSymbols = self.charsetSymbols.isChecked()
        self.attack_options.cpu = self.cpu_enabled.isChecked()
        self.attack_options.gpu = self.gpu_enabled.isChecked()
        self.attack_options.core_count = self.options.attack_options.core_count
        self.output.append(" Starting Attack ")
        self.output.append(f"       - Hash: {self.attack_options.hash_value}")
        self.output.append(f"       - Type: {self.attack_options.hash_type}")
        self.output.append(f"       - Attack: {self.attack_options.attack_type}")
        self.output.append(f"       - Wordlist: {self.attack_options.wordlist_location}")
        self.output.append(f"       - Processes: {self.attack_options.core_count}")
        
        parameter_check = self._check_parameters()
        if(parameter_check == [True, True, True]):

            if(self.attack_options.attack_type == "Brute Force"):
                character_set = ""
                if(self.attack_options.charsetAll):
                    character_set = self.numeric + self.lower_alpha + self.upper_alpha + self.symbols
                elif(self.attack_options.charsetLower):
                    character_set = character_set + self.lower_alpha
                elif(self.attack_options.charsetUpper):
                    character_set = character_set + self.upper_alpha
                elif(self.attack_options.charsetNumbers):
                    character_set = character_set + self.numeric
                elif(self.attack_options.charsetSymbols):
                    character_set = character_set + self.symbols
                else: 
                    self.output.append("Please Select at least 1 character set to start a Brute Force attack")
                
                #Creates another thread for the attack to run on to prevent application freezing
                pool = QThreadPool.globalInstance()
                worker = BruteForceWorker(self.attack_options, character_set ,self.output)
                pool.start(worker)

            if(self.attack_options.attack_type == "Dictionary"):
                #Creates another thread for the attack to run on to prevent application freezing
                pool = QThreadPool.globalInstance()
                worker = DictionaryWorker(self.attack_options, self.output)
                pool.start(worker)
        else:
            print("Cannot start attack")

    """
    Name: _pause
    Description: Will pause a current attack
    Parameters: self
    returns: none
    """
    def _pause(self):
        print("-Pause Attack-")

    """
    Name: _resume
    Description: Will resume the current attack
    Parameters: self
    returns: none
    """
    def _resume(self):
        print("-Resume Attack-")
    
    """
    Name: _save_file
    Description: Will create the file and write data to file
    Parameters: self, location: String - file location
    returns: none
    """
    def _save_file(self, location):
        with open(location, "x") as file:    
            file.write(f"name={self.temp_name}\n")
            file.write(f"hash_value={self.attack_options.hash_value}\n")
            file.write(f"hash_type={self.attack_options.hash_type}\n")
            file.write(f"attack_type={self.attack_options.attack_type}\n")
            file.write(f"wordlist_location={self.attack_options.wordlist_location}\n")
            file.write(f"hash_file_location={self.attack_options.hash_file_location}\n")
            file.write(f"charsetLower={self.attack_options.charsetLower}\n")
            file.write(f"charsetUpper={self.attack_options.charsetUpper}\n")
            file.write(f"charsetNumbers={self.attack_options.charsetNumbers}\n")
            file.write(f"charsetSymbols={self.attack_options.charsetSymbols}\n")
            file.write(f"wordlistLbl={self.temp_wordlistlbl}\n")
            file.write(f"core_count={self.attack_options.core_count}\n")
            file.write(f"pass_phrase_len={self.attack_options.pass_phrase_len}\n")
            file.write(f"max_brute_force={self.attack_options.max_brute_force}\n")
            file.write(f"output=\n{self.temp_output}")

            file.close()
            self.output.append("-= File Saved Successfully =-")

    """
    Name: _save
    Description: Will save an attack to a text file
    Parameters: self
    returns: none
    """
    def _save(self):
        print("-Save Attack-")

        self.temp_wordlistlbl = self.wordlistFilenameLbl.text()
        self.temp_output = self.output.toPlainText()
        self.temp_name = self.attack.objectName()

        self.save_location = QFileDialog.getSaveFileName(None,'Save File')

        if(os.path.isfile(f"{self.save_location[0]}.txt")):
            self._save_file(f"{self.save_location[0]}(1).txt")
        else:
            self._save_file(f"{self.save_location[0]}.txt")
    
    """
    Name: _load
    Description: Will load a new attack from a text file
    Parameters: self
    returns: none
    """
    def _load(self):
        print("-Load Attack-")
        attack_location = QtWidgets.QFileDialog.getOpenFileName(None, 'Open Previous attack', 'C:\\', '*.txt')
        self.attack_options = None
        data = list()
        
        with open(attack_location[0], encoding="latin-1") as file:
            for idx, data in enumerate(file):
                if(idx < 15):
                    data = data.split("=")
                    data[1] = data[1].replace("\n", "")
                    #Handles name in file
                    if(idx == 0):
                        self.attack_options = AttackOptions(data[1])
                    elif(idx == 1):
                        self.attack_options.hash_value = data[1] 
                    elif(idx == 2):
                        self.attack_options.hash_type = data[1]
                    elif(idx == 3):
                        self.attack_options.attack_type = data[1]
                    elif(idx == 4):
                        self.attack_options.wordlist_location = data[1]
                    elif(idx == 5):
                        self.attack_options.hash_file_location = data[1]
                    elif(idx == 6):
                        self.attack_options.charsetLower = bool(data[1])
                    elif(idx == 7):
                        self.attack_options.charsetUpper = bool(data[1])
                    elif(idx == 8):
                        self.attack_options.charsetNumbers = bool(data[1])
                    elif(idx == 9):
                        self.attack_options.charsetSymbols = bool(data[1])
                    elif(idx == 10):
                        self.wordlistLbl.setText(data[1])
                    elif(idx == 11):
                        self.attack_options.core_count = bool(data[1])
                    elif(idx == 12):
                        self.attack_options.pass_phrase_len = bool(data[1])
                    elif(idx == 13):
                        self.attack_options.max_brute_force = data[1]
                else:
                    self.output.append(data)

        self.hashInputTxt.setText(self.attack_options.hash_value)
        self.hashTypeCombo.setCurrentText(self.attack_options.hash_type)
        self.attackTypeCombo.setCurrentText(self.attack_options.attack_type)
        self.wordlistTxt.setPlainText(self.attack_options.wordlist_location)
        self.charsetAll.setChecked(self.attack_options.charsetAll)
        self.charsetLower.setChecked(self.attack_options.charsetLower)
        self.charsetUpper.setChecked(self.attack_options.charsetUpper)
        self.charsetNumbers.setChecked(self.attack_options.charsetNumbers)
        self.charsetSymbols.setChecked(self.attack_options.charsetSymbols)
        self.cpu_enabled.setChecked(self.attack_options.cpu)
        self.gpu_enabled.setChecked(self.attack_options.gpu)

    """
    Name: _options
    Description: will open up the application options
    Parameters: self
    returns: none
    """
    def _options(self):
        print("-Options-")  
        self.window = QtWidgets.QMainWindow()
        self.options.setupUi(self.window)
        self.window.show()
        
    """
    Name: _detect
    Description: Will try and detect hash from input field
    Parameters: self
    Returns: none
    """
    def _detect(self):
        print("-Detect Hash-")
        self.hash_value = self.__getHashValue__()

    """
    Name: _createNewAttack
    Description: Will create a new attack from create attack page
    Parameters: self
    returns: none
    """
    def _createNewAttack(self):
        print("-Create new Attack-")


if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    App = QtWidgets.QMainWindow()
    app.setWindowIcon(QtGui.QIcon('img/logo.png'))
    ui = Ui_App()
    ui.setupUi(App)
    App.show()
    app.exec()
